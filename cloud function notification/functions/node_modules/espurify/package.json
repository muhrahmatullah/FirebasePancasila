{
  "_args": [
    [
      {
        "raw": "espurify@^1.6.0",
        "scope": null,
        "escapedName": "espurify",
        "name": "espurify",
        "rawSpec": "^1.6.0",
        "spec": ">=1.6.0 <2.0.0",
        "type": "range"
      },
      "/Users/muhrahmatullah/FirebaseProjects/firebasepancasila/functions/node_modules/power-assert-context-reducer-ast"
    ]
  ],
  "_from": "espurify@>=1.6.0 <2.0.0",
  "_id": "espurify@1.8.0",
  "_inCache": true,
  "_location": "/espurify",
  "_nodeVersion": "10.0.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/espurify_1.8.0_1525933685188_0.7540570618635034"
  },
  "_npmUser": {
    "name": "twada",
    "email": "takuto.wada@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "espurify@^1.6.0",
    "scope": null,
    "escapedName": "espurify",
    "name": "espurify",
    "rawSpec": "^1.6.0",
    "spec": ">=1.6.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/power-assert-context-reducer-ast"
  ],
  "_resolved": "https://registry.npmjs.org/espurify/-/espurify-1.8.0.tgz",
  "_shasum": "270d8046e4e47e923d75bc8a87357c7112ca8485",
  "_shrinkwrap": null,
  "_spec": "espurify@^1.6.0",
  "_where": "/Users/muhrahmatullah/FirebaseProjects/firebasepancasila/functions/node_modules/power-assert-context-reducer-ast",
  "author": {
    "name": "Takuto Wada",
    "email": "takuto.wada@gmail.com",
    "url": "https://github.com/twada"
  },
  "bugs": {
    "url": "https://github.com/estools/espurify/issues"
  },
  "dependencies": {
    "core-js": "^2.0.0"
  },
  "description": "Clone new AST without extra properties",
  "devDependencies": {
    "acorn": "^5.0.0",
    "babel-types": "^6.3.20",
    "babylon": "^6.3.20",
    "browserify": "^13.0.0",
    "derequire": "^2.0.2",
    "dereserve": "^1.0.0",
    "esprima": "^4.0.0",
    "estraverse": "^4.1.0",
    "licensify": "^3.1.0",
    "mocha": "^5.0.0",
    "semistandard": "^12.0.0",
    "snazzy": "^7.0.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-jdkJG9jswjKCCDmEridNUuIQei9algr+o66ZZ19610ZoBsiWLRsQGNYS4HGez3Z/DsR0lhANGAqiwBUclPuNag==",
    "shasum": "270d8046e4e47e923d75bc8a87357c7112ca8485",
    "tarball": "https://registry.npmjs.org/espurify/-/espurify-1.8.0.tgz",
    "fileCount": 9,
    "unpackedSize": 46062,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa8+Z1CRA9TVsSAnZWagAA2BgQAJqqiHXCwKf4gqMF6kTJ\nuW9SCVqyYCxFX7wSU1BXcZX57E+cImga+eJh4gUewba/lkNez+ceYZPnlLa/\nO3dHc5FGo+8G85twVJ3VjYERnt01QCKWVzkh6rCY4I6qXqDAKReMHf/MX8kl\nzhcHtRcO05/TJtC+GHVi/Z2C1NTvKNJnXEOiaqYNEsfo6xr7vTavQzEBHrtn\nDLaxvVzCEzgXENM6YZrApHaBPkXC3fc2s6+jvKXELlbAbcR4cNCoUQAZCisV\nZpEX7oHEhJ0ML7SI4YHUiwWAqfpvNjlrqaUAuZtm2mW1R1JoKVOA2VJQDTt0\nWq8aow7z4Kl4AhlwDxr7o+2TqR/jHueiRimvf9OryqebX3Et7a6fuzqxkaYr\nCxWOJLDPmOrAY9D42sha42oinS6aNO2EZXCw/txvqzNClKQUxuSYVMSqjBrV\n0twIUQicl85M5v+mU+X485RSmrg3VB/1LfLsVEYjl8C2TICmruQJjJGM70aK\nKX9YBXjuj/wDIhjY42gphVwv42DqSI7zxh7NvmQ6f/SkGVoEWrrWwOGZKvl4\n9AWB5W1tuBrYW+0kNRHYqTwilJMin7y9ntoSLyPqnfYcG178J/RWdTYd3Bxk\njY3lNYAoN0OtggdT0ZbwQHbmuetJTToqJhGntpsl4i3FMMaf/j3T2/7NuQH2\nQn4s\r\n=FSk7\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "CHANGELOG.md",
    "MIT-LICENSE.txt",
    "README.md",
    "index.js",
    "lib",
    "build/espurify.js",
    "package.json"
  ],
  "gitHead": "fc66add3a9d75ae2064c71e39113aa850390f146",
  "homepage": "https://github.com/estools/espurify",
  "keywords": [
    "ast",
    "estree",
    "ecmascript",
    "es6"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "twada",
      "email": "takuto.wada@gmail.com"
    }
  ],
  "name": "espurify",
  "optionalDependencies": {},
  "readme": "espurify\n================================\n\nClone new AST without extra properties\n\n[![Build Status](https://travis-ci.org/estools/espurify.svg?branch=master)](https://travis-ci.org/estools/espurify)\n[![NPM version](https://badge.fury.io/js/espurify.svg)](https://badge.fury.io/js/espurify)\n[![License](https://img.shields.io/badge/license-MIT-brightgreen.svg)](https://github.com/estools/espurify/blob/master/MIT-LICENSE.txt)\n[![Code Style](https://img.shields.io/badge/code%20style-semistandard-brightgreen.svg)](https://github.com/Flet/semistandard)\n\n\nAPI\n---------------------------------------\n\n### var purifiedAstClone = espurify(originalAst)\n\nReturns new clone of `originalAst` but without extra properties.\n\nLeaves properties defined in [The ESTree Spec](https://github.com/estree/estree) (formerly known as [Mozilla SpiderMonkey Parser API](https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API)) only. Also note that extra informations (such as `loc`, `range` and `raw`) are eliminated too.\n\n`espurify` supports [ES5](https://github.com/estree/estree/blob/master/es5.md), [ES2015](https://github.com/estree/estree/blob/master/es2015.md), and [ES2017](https://github.com/estree/estree/blob/master/es2017.md) properties.\n\n\n### var customizedCloneFunctionWithWhiteList = espurify.cloneWithWhitelist(whiteList)\n\nReturns customized function for cloning AST, with user-provided `whiteList`.\n\n\n### var purifiedAstClone = customizedCloneFunctionWithWhiteList(originalAst)\n\nReturns new clone of `originalAst` by customized function.\n\n\n#### whiteList\n\n| type     | default value |\n|:---------|:--------------|\n| `object` | N/A           |\n\n`whiteList` is an object containing NodeType as keys and properties as values.\n\n```js\n{\n    ArrayExpression: ['type', 'elements'],\n    ArrayPattern: ['type', 'elements'],\n    ArrowFunctionExpression: ['type', 'id', 'params', 'body', 'generator', 'expression'],\n    AssignmentExpression: ['type', 'operator', 'left', 'right'],\n    ...\n```\n\n\n### var customizedCloneFunction = espurify.customize(options)\n\nReturns customized function for cloning AST, configured by custom `options`.\n\n\n### var purifiedAstClone = customizedCloneFunction(originalAst)\n\nReturns new clone of `originalAst` by customized function.\n\n\n\n#### options\n\n| type     | default value |\n|:---------|:--------------|\n| `object` | `{}`          |\n\nConfiguration options. If not passed, default options will be used.\n\n\n#### options.extra\n\n| type                | default value |\n|:--------------------|:--------------|\n| `array` of `string` | null          |\n\nList of extra properties to be left in result AST. For example, functions returned by `espurify.customize({extra: ['raw']})` will preserve `raw` properties of `Literal`. Functions return by `espurify.customize({extra: ['loc', 'range']})` will preserve `loc` and `range` properties of each Node.\n\n\nEXAMPLE\n---------------------------------------\n\n```javascript\nvar espurify = require('espurify'),\n    estraverse = require('estraverse'),\n    esprima = require('esprima'),\n    syntax = estraverse.Syntax,\n    assert = require('assert');\n\nvar jsCode = 'assert(\"foo\")';\n\n// Adding extra informations to AST\nvar originalAst = esprima.parse(jsCode, {tolerant: true, loc: true, raw: true});\nestraverse.replace(originalAst, {\n    leave: function (currentNode, parentNode) {\n        if (currentNode.type === syntax.Literal && typeof currentNode.raw !== 'undefined') {\n            currentNode['x-verbatim-bar'] = {\n                content : currentNode.raw,\n                precedence : 18  // escodegen.Precedence.Primary\n            };\n            return currentNode;\n        } else {\n            return undefined;\n        }\n    }\n});\n\n\n// purify AST\nvar purifiedClone = espurify(originalAst);\n\n\n// original AST is not modified\nassert.deepEqual(originalAst, {\n  type: 'Program',\n  body: [\n    {\n      type: 'ExpressionStatement',\n      expression: {\n        type: 'CallExpression',\n        callee: {\n          type: 'Identifier',\n          name: 'assert',\n          loc: {\n            start: {\n              line: 1,\n              column: 0\n            },\n            end: {\n              line: 1,\n              column: 6\n            }\n          }\n        },\n        arguments: [\n          {\n            type: 'Literal',\n            value: 'foo',\n            raw: '\"foo\"',\n            loc: {\n              start: {\n                line: 1,\n                column: 7\n              },\n              end: {\n                line: 1,\n                column: 12\n              }\n            },\n            \"x-verbatim-bar\": {\n              content: '\"foo\"',\n              precedence: 18\n            }\n          }\n        ],\n        loc: {\n          start: {\n            line: 1,\n            column: 0\n          },\n          end: {\n            line: 1,\n            column: 13\n          }\n        }\n      },\n      loc: {\n        start: {\n          line: 1,\n          column: 0\n        },\n        end: {\n          line: 1,\n          column: 13\n        }\n      }\n    }\n  ],\n  loc: {\n    start: {\n      line: 1,\n      column: 0\n    },\n    end: {\n      line: 1,\n      column: 13\n    }\n  },\n  errors: []\n});\n\n\n// Extra properties are eliminated from cloned AST\nassert.deepEqual(purifiedClone, {\n    type: 'Program',\n    body: [\n        {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'CallExpression',\n                callee: {\n                    type: 'Identifier',\n                    name: 'assert'\n                },\n                arguments: [\n                    {\n                        type: 'Literal',\n                        value: 'foo'\n                    }\n                ]\n            }\n        }\n    ]\n});\n```\n\n\nINSTALL\n---------------------------------------\n\n### via npm\n\nInstall\n\n    $ npm install --save espurify\n\nUse\n\n```javascript\nvar espurify = require('espurify');\n```\n\n#### use espurify module on browser\n\n`espurify` function is exported\n\n    <script type=\"text/javascript\" src=\"./path/to/node_modules/espurify/build/espurify.js\"></script>\n\n\n### via bower\n\nInstall\n\n    $ bower install --save espurify\n\nLoad (`espurify` function is exported)\n\n    <script type=\"text/javascript\" src=\"./path/to/bower_components/espurify/build/espurify.js\"></script>\n\n\n\nAUTHOR\n---------------------------------------\n* [Takuto Wada](https://github.com/twada)\n\n\nLICENSE\n---------------------------------------\nLicensed under the [MIT](https://github.com/estools/espurify/blob/master/MIT-LICENSE.txt) license.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/estools/espurify.git"
  },
  "scripts": {
    "dist": "browserify index.js --plugin licensify --standalone espurify | dereserve | derequire > ./build/espurify.js",
    "fmt": "semistandard --fix index.js lib test",
    "lint": "semistandard --verbose index.js lib test | snazzy",
    "preversion": "npm test",
    "test": "npm run lint && mocha test",
    "version": "npm run dist && git add -A build"
  },
  "semistandard": {
    "ignore": [
      "/build/",
      "/bench/",
      "**/*.jsx"
    ],
    "globals": [
      "describe",
      "beforeEach",
      "it"
    ]
  },
  "version": "1.8.0"
}
