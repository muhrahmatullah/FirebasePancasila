{
  "_args": [
    [
      {
        "raw": "regexpp@^1.0.1",
        "scope": null,
        "escapedName": "regexpp",
        "name": "regexpp",
        "rawSpec": "^1.0.1",
        "spec": ">=1.0.1 <2.0.0",
        "type": "range"
      },
      "/Users/muhrahmatullah/FirebaseProjects/firebasepancasila/functions/node_modules/eslint"
    ]
  ],
  "_from": "regexpp@>=1.0.1 <2.0.0",
  "_id": "regexpp@1.1.0",
  "_inCache": true,
  "_location": "/regexpp",
  "_nodeVersion": "8.11.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/regexpp_1.1.0_1522403159299_0.2810022828991172"
  },
  "_npmUser": {
    "name": "mysticatea",
    "email": "star.ctor@gmail.com"
  },
  "_npmVersion": "5.8.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "regexpp@^1.0.1",
    "scope": null,
    "escapedName": "regexpp",
    "name": "regexpp",
    "rawSpec": "^1.0.1",
    "spec": ">=1.0.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/eslint"
  ],
  "_resolved": "https://registry.npmjs.org/regexpp/-/regexpp-1.1.0.tgz",
  "_shasum": "0e3516dd0b7904f413d2d4193dce4618c3a689ab",
  "_shrinkwrap": null,
  "_spec": "regexpp@^1.0.1",
  "_where": "/Users/muhrahmatullah/FirebaseProjects/firebasepancasila/functions/node_modules/eslint",
  "author": {
    "name": "Toru Nagashima",
    "url": "https://github.com/mysticatea"
  },
  "bugs": {
    "url": "https://github.com/mysticatea/regexpp/issues"
  },
  "dependencies": {},
  "description": "Regular expression parser for ECMAScript 2018.",
  "devDependencies": {
    "@types/eslint": "^4.16.0",
    "@types/mocha": "^2.2.48",
    "@types/node": "^9.4.6",
    "babel-core": "^6.26.0",
    "babel-plugin-transform-es2015-destructuring": "^6.23.0",
    "babel-plugin-transform-es2015-parameters": "^6.24.1",
    "babel-plugin-transform-es2015-spread": "^6.22.0",
    "dts-bundle": "^0.7.3",
    "eslint": "^4.18.0",
    "eslint-config-mysticatea": "^13.0.2",
    "eslint-config-prettier": "^2.9.0",
    "eslint-plugin-prettier": "^2.4.0",
    "mocha": "^5.0.1",
    "npm-run-all": "^4.1.2",
    "prettier": "^1.9.2",
    "rimraf": "^2.6.2",
    "rollup": "^0.56.1",
    "rollup-plugin-babel": "^3.0.3",
    "rollup-plugin-node-resolve": "^3.0.3",
    "rollup-plugin-sourcemaps": "^0.4.2",
    "rollup-watch": "^4.3.1",
    "ts-node": "^5.0.0",
    "typescript": "^2.7.2",
    "typescript-eslint-parser": "^14.0.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-LOPw8FpgdQF9etWMaAfG/WRthIdXJGYp4mJ2Jgn/2lpkbod9jPn0t9UqN7AxBOKNfzRbYyVfgc7Vk4t/MpnXgw==",
    "shasum": "0e3516dd0b7904f413d2d4193dce4618c3a689ab",
    "tarball": "https://registry.npmjs.org/regexpp/-/regexpp-1.1.0.tgz",
    "fileCount": 8,
    "unpackedSize": 1110886
  },
  "engines": {
    "node": ">=4.0.0"
  },
  "files": [
    "index.*"
  ],
  "gitHead": "258651ef294c23faaa4bc25861a9e77c21136c48",
  "homepage": "https://github.com/mysticatea/regexpp#readme",
  "keywords": [
    "regexp",
    "regular",
    "expression",
    "parser",
    "validator",
    "ast",
    "abstract",
    "syntax",
    "tree",
    "ecmascript",
    "es2015",
    "es2016",
    "es2017",
    "es2018",
    "annexB"
  ],
  "license": "MIT",
  "main": "index",
  "maintainers": [
    {
      "name": "mysticatea",
      "email": "star.ctor@gmail.com"
    }
  ],
  "name": "regexpp",
  "optionalDependencies": {},
  "readme": "# regexpp\n\n[![npm version](https://img.shields.io/npm/v/regexpp.svg)](https://www.npmjs.com/package/regexpp)\n[![Downloads/month](https://img.shields.io/npm/dm/regexpp.svg)](http://www.npmtrends.com/regexpp)\n[![Build Status](https://travis-ci.org/mysticatea/regexpp.svg?branch=master)](https://travis-ci.org/mysticatea/regexpp)\n[![Dependency Status](https://david-dm.org/mysticatea/regexpp.svg)](https://david-dm.org/mysticatea/regexpp)\n\nThe regular expression parser for ECMAScript.\n\n## üíø Installation\n\n```bash\n$ npm install regexpp\n```\n\n- require Node.js 4.0.0 or newer.\n\n## üìñ Usage\n\n```ts\nimport {\n    AST,\n    RegExpParser,\n    RegExpValidator,\n    parseRegExpLiteral,\n    validateRegExpLiteral,\n} from \"regexpp\"\n```\n\n### parseRegExpLiteral(source, options?)\n\nParse a given regular expression literal then make AST object.\n\nThis is equivalent to `new RegExpParser(options).parseLiteral(source)`.\n\n- **Parameters:**\n    - `source` (`string`) The source code to parse.\n    - `options?` ([`RegExpParser.Options`]) The options to parse.\n- **Return:**\n    - The AST of the regular expression.\n\n### validateRegExpLiteral(source, options?)\n\nValidate a given regular expression literal.\n\nThis is equivalent to `new RegExpValidator(options).validateLiteral(source)`.\n\n- **Parameters:**\n    - `source` (`string`) The source code to validate.\n    - `options?` ([`RegExpValidator.Options`]) The options to validate.\n\n### RegExpParser\n\n#### new RegExpParser(options?)\n\n- **Parameters:**\n    - `options?` ([`RegExpParser.Options`]) The options to parse.\n\n#### parser.parseLiteral(source, start?, end?)\n\nParse a regular expression literal.\n\n- **Parameters:**\n    - `source` (`string`) The source code to parse. E.g. `\"/abc/g\"`.\n    - `start?` (`number`) The start index in the source code. Default is `0`.\n    - `end?` (`number`) The end index in the source code. Default is `source.length`.\n- **Return:**\n    - The AST of the regular expression.\n\n#### parser.parsePattern(source, start?, end?, uFlag?)\n\nParse a regular expression pattern.\n\n- **Parameters:**\n    - `source` (`string`) The source code to parse. E.g. `\"abc\"`.\n    - `start?` (`number`) The start index in the source code. Default is `0`.\n    - `end?` (`number`) The end index in the source code. Default is `source.length`.\n    - `uFlag?` (`boolean`) The flag to enable Unicode mode.\n- **Return:**\n    - The AST of the regular expression pattern.\n\n#### parser.parseFlags(source, start?, end?)\n\nParse a regular expression flags.\n\n- **Parameters:**\n    - `source` (`string`) The source code to parse. E.g. `\"gim\"`.\n    - `start?` (`number`) The start index in the source code. Default is `0`.\n    - `end?` (`number`) The end index in the source code. Default is `source.length`.\n- **Return:**\n    - The AST of the regular expression flags.\n\n### RegExpValidator\n\n#### new RegExpValidator(options)\n\n- **Parameters:**\n    - `options` ([`RegExpValidator.Options`]) The options to validate.\n\n#### validator.validateLiteral(source, start, end)\n\nValidate a regular expression literal.\n\n- **Parameters:**\n    - `source` (`string`) The source code to validate.\n    - `start?` (`number`) The start index in the source code. Default is `0`.\n    - `end?` (`number`) The end index in the source code. Default is `source.length`.\n\n#### validator.validatePattern(source, start, end, uFlag)\n\nValidate a regular expression pattern.\n\n- **Parameters:**\n    - `source` (`string`) The source code to validate.\n    - `start?` (`number`) The start index in the source code. Default is `0`.\n    - `end?` (`number`) The end index in the source code. Default is `source.length`.\n    - `uFlag?` (`boolean`) The flag to enable Unicode mode.\n\n#### validator.validateFlags(source, start, end)\n\nValidate a regular expression flags.\n\n- **Parameters:**\n    - `source` (`string`) The source code to validate.\n    - `start?` (`number`) The start index in the source code. Default is `0`.\n    - `end?` (`number`) The end index in the source code. Default is `source.length`.\n\n## üì∞ Changelog\n\n- [GitHub Releases](https://github.com/mysticatea/regexpp/releases)\n\n## üçª Contributing\n\nWelcome contributing!\n\nPlease use GitHub's Issues/PRs.\n\n### Development Tools\n\n- `npm test` runs tests and measures coverage.\n- `npm run build` compiles TypeScript source code to `index.js`, `index.js.map`, and `index.d.ts`.\n- `npm run clean` removes the temporary files which are created by `npm test` and `npm run build`.\n- `npm run lint` runs ESLint.\n- `npm run update:test` updates test fixtures.\n- `npm run update:ids` updates `src/unicode/ids.ts`.\n- `npm run watch` runs tests with `--watch` option.\n\n[`RegExpParser.Options`]: src/parser.ts#L527\n[`RegExpValidator.Options`]: src/validator.ts#L127\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mysticatea/regexpp.git"
  },
  "scripts": {
    "build": "run-s build:*",
    "build:dts": "dts-bundle --name regexpp --main .temp/index.d.ts --out ../index.d.ts",
    "build:js": "rollup -c rollup-js.config.js",
    "build:mjs": "rollup -c rollup-mjs.config.js",
    "build:tsc": "tsc --module es2015 --target es2015",
    "clean": "rimraf .temp index.*",
    "lint": "eslint src test tools --ext .ts",
    "postversion": "git push && git push --tags",
    "prebuild": "npm run -s clean",
    "pretest": "run-s build lint",
    "preversion": "npm test",
    "prewatch": "npm run -s clean",
    "test": "_mocha --require ts-node/register --reporter dot --timeout 10000 \"test/*.ts\"",
    "update:ids": "ts-node tools/update-unicode-ids.ts",
    "update:test": "ts-node tools/update-fixtures.ts",
    "version": "npm run -s build",
    "watch": "npm run -s test -- --watch-extensions .ts --watch --growl"
  },
  "version": "1.1.0"
}
